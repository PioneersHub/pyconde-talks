# Generated by Django 5.2.1 on 2025-05-27 15:41

import datetime
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the room', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Description of the room')),
                ('capacity', models.PositiveIntegerField(blank=True, help_text='Maximum number of people that can fit in the room', null=True)),
                ('slido_link', models.URLField(blank=True, default='', help_text='Link to Slido for this room')),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Full name of the speaker', max_length=200)),
                ('biography', models.TextField(blank=True, help_text='Biography of the speaker')),
                ('avatar', models.URLField(blank=True, help_text="URL to the speaker's avatar image")),
                ('gender', models.CharField(blank=True, choices=[('M', 'Man'), ('W', 'Woman'), ('NB', 'Non-binary'), ('GQ', 'Genderqueer'), ('SD', 'Self-describe'), ('NS', 'Prefer not to say')], help_text='Gender identity (optional)', max_length=2)),
                ('gender_self_description', models.CharField(blank=True, help_text="If you selected 'Self-describe', please specify your gender identity", max_length=100)),
                ('pronouns', models.CharField(blank=True, help_text='Preferred pronouns (e.g., he/him, she/her, they/them)', max_length=50)),
                ('pretalx_id', models.CharField(help_text='Unique identifier for the speaker in the Pretalx system', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Streaming',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(help_text='When the streaming starts')),
                ('end_time', models.DateTimeField(help_text='When the streaming ends')),
                ('video_link', models.URLField(help_text='Link to Vimeo streaming')),
                ('room', models.ForeignKey(help_text='Room where the streaming takes place', on_delete=django.db.models.deletion.CASCADE, related_name='streamings', to='talks.room')),
            ],
            options={
                'verbose_name': 'Streaming',
                'verbose_name_plural': 'Streamings',
                'ordering': ['start_time'],
                'indexes': [models.Index(fields=['room', 'start_time'], name='talks_strea_room_id_982273_idx'), models.Index(fields=['room', 'end_time'], name='talks_strea_room_id_c07b58_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('start_time__lt', models.F('end_time'))), name='streaming_start_before_end')],
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('presentation_type', models.CharField(choices=[('Keynote', 'Keynote'), ('Kids', 'Kids'), ('Lightning', 'Lightning Talk'), ('Panel', 'Panel'), ('Talk', 'Talk'), ('Tutorial', 'Tutorial')], default='Talk', help_text='Type of the presentation', max_length=10)),
                ('title', models.CharField(help_text='Title of the talk', max_length=250)),
                ('abstract', models.TextField(blank=True, help_text='Talk abstract')),
                ('description', models.TextField(blank=True, help_text='Full description of the talk')),
                ('start_time', models.DateTimeField(blank=True, default=datetime.datetime(2050, 1, 1, 0, 0, tzinfo=datetime.timezone.utc), help_text='Date and time when the talk is scheduled')),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta(0), help_text='Duration of the talk')),
                ('track', models.CharField(blank=True, default='No track', help_text='Track or category of the talk', max_length=100)),
                ('external_image_url', models.URLField(blank=True, default='', help_text='URL to an externally hosted image')),
                ('image', models.ImageField(blank=True, help_text='Image for the talk. Overrides the external image URL if provided.', null=True, upload_to='talk_images/')),
                ('pretalx_link', models.URLField(blank=True, default='', help_text='Link to talk description in pretalx')),
                ('slido_link', models.URLField(blank=True, default='', help_text="Link to questions on Slido. Overrides the room's link if provided.")),
                ('video_link', models.URLField(blank=True, default='', help_text='Link to talk recording on Vimeo. Overrides the calculated streaming link if provided.')),
                ('video_start_time', models.PositiveIntegerField(blank=True, default=0, help_text='Start time in seconds')),
                ('hide', models.BooleanField(default=False, help_text='Hide this talk from the public')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When this talk was added to the system')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this talk was last modified')),
                ('room', models.ForeignKey(blank=True, help_text='Room where the talk takes place', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='talks', to='talks.room')),
                ('speakers', models.ManyToManyField(help_text='Speakers giving this talk', related_name='talks', to='talks.speaker')),
            ],
            options={
                'verbose_name': 'Talk',
                'verbose_name_plural': 'Talks',
                'ordering': ['start_time'],
                'indexes': [models.Index(fields=['start_time'], name='talks_talk_start_t_1d5eb0_idx'), models.Index(fields=['room'], name='talks_talk_room_id_6b475b_idx')],
            },
        ),
    ]
